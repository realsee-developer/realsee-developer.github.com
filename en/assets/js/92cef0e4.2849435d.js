"use strict";(self.webpackChunkrealsee_developer_github_com=self.webpackChunkrealsee_developer_github_com||[]).push([[920],{49613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(59496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,g=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(2962),o=(n(59496),n(49613));const i={title:"Voice signature fetch"},a=void 0,s={unversionedId:"front/live/faq/voice-sign",id:"front/live/faq/voice-sign",title:"Voice signature fetch",description:"Voice signature is a necessary preparation to connect with a voice, and you simply need to implement the request to get a voice signature from your backend.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/front/live/faq/voice-sign.md",sourceDirName:"front/live/faq",slug:"/front/live/faq/voice-sign",permalink:"/en/docs/front/live/faq/voice-sign",draft:!1,tags:[],version:"current",lastUpdatedBy:"lichengjie",lastUpdatedAt:1669264964,formattedLastUpdatedAt:"Nov 24, 2022",frontMatter:{title:"Voice signature fetch"},sidebar:"\u5982\u89c6\u5e26\u770b",previous:{title:"Invoice ticket description",permalink:"/en/docs/front/live/faq/ticket"}},c={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Voice signature is a necessary preparation to connect with a voice, and you simply need to implement the request to get a voice signature from your backend."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u8bed\u97f3\u7b7e\u540d\u83b7\u53d6\u65b9\u6cd5\u5b9e\u73b0\u793a\u4f8b"',title:'"\u8bed\u97f3\u7b7e\u540d\u83b7\u53d6\u65b9\u6cd5\u5b9e\u73b0\u793a\u4f8b"'},'/*\n * Get the callback method for language signatures\uff1agetVoiceSign\n * This method is used internally by sdk and you simply need to implement the method as such.\n * [Special note]\uff1aopts are physical references, and sdk is automatically injected when calling a language signature method. Use the example to write its reference without adding the arguments themselves.\n ***/\n// highlight-start\nconst getVoiceSignn = async (opts) => {\n  // ops) opts are shaped, and sdk will be injected automatically when calling language signature methods without having to be processed by the business party.\n  // Highlight-end\n  // request your backend interface here. The request method is simply encapsulating the fetch method without special treatment.\n  return await request("getRtcSign", {\n    voice_id: opts.voiceId,\n    room_id: opts.roomId,\n    user_id: opts.userId,\n  })\n    .then((res) => {\n      // Get the voice signature and other information returned by the backend, and follow the sdk requirements, just return and go out\n      return {\n        sdkAppId: Number(res.voice_app_id),\n        userId: res.user_identifier,\n        userSig: res.sign,\n      };\n    })\n    .catch((error) => {\n      throw Error(error.message);\n    });\n};\n')))}p.isMDXComponent=!0}}]);