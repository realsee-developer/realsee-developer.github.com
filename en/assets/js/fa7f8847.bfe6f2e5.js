"use strict";(self.webpackChunkrealsee_developer_github_com=self.webpackChunkrealsee_developer_github_com||[]).push([[6685],{49613:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>b});var t=n(59496);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=t.createContext({}),u=function(e){var r=t.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},d=function(e){var r=u(e.components);return t.createElement(a.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(n),b=i,c=m["".concat(a,".").concat(b)]||m[b]||p[b]||o;return n?t.createElement(c,s(s({ref:r},d),{},{components:n})):t.createElement(c,s({ref:r},d))}));function b(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var a in r)hasOwnProperty.call(r,a)&&(l[a]=r[a]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4244:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=n(2962),i=(n(59496),n(49613));const o={title:'Browser "bridge" implementation'},s=void 0,l={unversionedId:"webview/jsbridge/browser-jsbridge",id:"webview/jsbridge/browser-jsbridge",title:'Browser "bridge" implementation',description:'does not exist because the browser itself is the full version of WebViewBut in order to ensure consistency in business source logic, we also simulate a jsBridge concept in the browser environment.This chapter will give you a detailed idea of how to implement browser "bridge" in your own code based on @realsee/jsbridge-x.',source:"@site/i18n/en/docusaurus-plugin-content-docs/current/webview/jsbridge/browser-jsbridge.md",sourceDirName:"webview/jsbridge",slug:"/webview/jsbridge/browser-jsbridge",permalink:"/en/docs/webview/jsbridge/browser-jsbridge",draft:!1,tags:[],version:"current",lastUpdatedBy:"lichengjie",lastUpdatedAt:1669264964,formattedLastUpdatedAt:"Nov 24, 2022",frontMatter:{title:'Browser "bridge" implementation'},sidebar:"\u5bb9\u5668\u96c6\u6210",previous:{title:"React Support",permalink:"/en/docs/webview/jsbridge/react-support"}},a={},u=[{value:"Full Example",id:"full-example",level:2}],d={toc:u};function p(e){let{components:r,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"does not exist because the browser itself is the full version of WebViewBut in order to ensure consistency in business source logic, we also simulate a jsBridge concept in the browser environment.",(0,i.kt)("strong",{parentName:"p"},'This chapter will give you a detailed idea of how to implement browser "bridge" in your own code based on ',(0,i.kt)("inlineCode",{parentName:"strong"},"@realsee/jsbridge-x"),"."))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@realsee/jsbridge-x")," ",(0,i.kt)("inlineCode",{parentName:"p"},"jsBridge")," is based on ",(0,i.kt)("inlineCode",{parentName:"p"},"JSBridgeProtocol")," implemented with subscriber mode, first you need to introduce Subscripbe and JSBridgeProtocol interfaces.Created a class named JSBridgeBrowser based on Subscripbe and JSBridgeProtocol"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Subscribe } from "@realsee/jsbridge-x/lib/shared-utils/Subscribe";\nimport { JSBridgeProtocol } from "@realsee/jsbridge-x/lib/typings/JSBridgeProtocol";\nimport { WebViewEventMap } from "@realsee/jsbridge-x/lib/typings/WebViewEventMap";\n\nexport class BrowserJsbridge\n  extends Subscribe<WebViewEventMap>\n  implements JSBridgeProtocol {\n  //  write it here\n}\n')),(0,i.kt)("p",null,"Next, you can implement the method by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSBridgeProtocol"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you have installed ",(0,i.kt)("inlineCode",{parentName:"p"},"@realsee/jsbridge-x")," , you can see the full JSBridgeProtocol ",(0,i.kt)("inlineCode",{parentName:"p"},"JSBridgeProtocol")," interface statements in ",(0,i.kt)("inlineCode",{parentName:"p"},"@realsee/jsbridge-x/lib/typeings/JSBridgeProtocol.d.ts")," Statement file.\nAlso available at the direct point ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://unpkg.com/@realsee/jsbridge-x/docs/interfaces/jsBridge.JSBridgeProtocol.html"},"Interface JSBridgeProtocol document description")),"\nWhen viewing the document link, the required version number can be changed to view the required version. ",(0,i.kt)("a",{parentName:"p",href:"https://unpkg.com/@realsee/jsbridge-x**%7B%E7%89%88%E6%9C%AC%E5%8F%B7%7D**/docs/interfaces/jsBridge.JSBridgeProtocol.html"},"https://unpkg.com/@realsee/jsbridge-x**{\u7248\u672c\u53f7}**/docs/interfaces/jsBridge.JSBridgeProtocol.html"))),(0,i.kt)("h2",{id:"full-example"},"Full Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="JSBridgeBrowser.ts"',title:'"JSBridgeBrowser.ts"'},'import { Subscribe } from "@realsee/jsbridge-x/lib/shared-utils/Subscribe";\nimport { DeviceInfo } from "@realsee/jsbridge-x/lib/typings/DeviceInfo";\nimport { OpenWebViewEnum } from "@realsee/jsbridge-x/lib/typings/OpenWebViewEnum";\nimport { ShareConfig } from "@realsee/jsbridge-x/lib/typings/ShareConfig";\nimport { UserInfo } from "@realsee/jsbridge-x/lib/typings/UserInfo";\nimport { WebViewEventMap } from "@realsee/jsbridge-x/lib/typings/WebViewEventMap";\nimport {\n  WebViewState,\n  OrientationEnum,\n} from "@realsee/jsbridge-x/lib/typings/WebViewState";\nimport { WebViewTypeEnum } from "@realsee/jsbridge-x/lib/typings/WebViewTypeEnum";\nimport {\n  JSBridgeProtocol,\n  JSBridgeReturnType,\n} from "@realsee/jsbridge-x/lib/typings/JSBridgeProtocol";\n\nexport class JSBridgeBrowser\n  extends Subscribe<WebViewEventMap>\n  implements JSBridgeProtocol\n{\n  actionShare(\n    shareConfig: Partial<ShareConfig>\n  ): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  callAndBackfeed<T>(\n    schemeUrl: string\n  ): Promise<JSBridgeReturnType<false | T>> {\n    return Promise.resolve([false, null]);\n  }\n\n  callAndListen<T>(\n    schemeUrl: string,\n    callback: (data: T) => void\n  ): Promise<JSBridgeReturnType<false | (() => void)>> {\n    return Promise.resolve([false, null]);\n  }\n\n  closeLoading(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  closeWebView(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  createCacheProxyUrl(urls: string | string[]): string[] {\n    return [];\n  }\n\n  detectMicro(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  getBangsHeight(): Promise<JSBridgeReturnType<number | false>> {\n    return Promise.resolve([false, null]);\n  }\n\n  getDeviceInfo(): Promise<JSBridgeReturnType<DeviceInfo | false>> {\n    return Promise.resolve([false, null]);\n  }\n\n  getUserInfo(): Promise<JSBridgeReturnType<UserInfo | false>> {\n    return Promise.resolve([false, null]);\n  }\n\n  getWebViewState(): Promise<JSBridgeReturnType<WebViewState | false>> {\n    return Promise.resolve([false, null]);\n  }\n\n  keepScreenLight(enable: boolean): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  loadProgress(progress: number): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  login(): Promise<JSBridgeReturnType<UserInfo | false>> {\n    return Promise.resolve([false, null]);\n  }\n\n  logout(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  minimize(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  openWebView(\n    url: string,\n    way: OpenWebViewEnum\n  ): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  preload(urls: string[]): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  ready(): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  saveImage2Album(base64: string): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  setLeftTopBackButton(enable: boolean): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  setOrientation(\n    orientation: OrientationEnum\n  ): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  shock(duration: number | undefined): Promise<JSBridgeReturnType<boolean>> {\n    return Promise.resolve([false, null]);\n  }\n\n  webViewType: WebViewTypeEnum = WebViewTypeEnum.Browser;\n}\n')))}p.isMDXComponent=!0}}]);