"use strict";(self.webpackChunkrealsee_developer_github_com=self.webpackChunkrealsee_developer_github_com||[]).push([[3420],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(67294),a=t(86010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,l),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(87462),a=t(67294),o=t(86010),l=t(72389),s=t(67392),i=t(7094),c=t(12466);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:n,block:t,defaultValue:l,values:p,groupId:u,className:m}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=p??f.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),k=(0,s.l)(g,((e,n)=>e.value===n.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===l?l:l??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:b}=(0,i.U)(),[y,w]=(0,a.useState)(v),I=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=u){const e=h[u];null!=e&&e!==y&&g.some((n=>n.value===e))&&w(e)}const R=e=>{const n=e.currentTarget,t=I.indexOf(n),r=g[t].value;r!==y&&(N(n),w(r),null!=u&&b(u,String(r)))},E=e=>{let n=null;switch(e.key){case"Enter":R(e);break;case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",d.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},m)},g.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:e=>I.push(e),onKeyDown:E,onClick:R},l,{className:(0,o.Z)("tabs__item",d.tabItem,l?.className,{"tabs__item--active":y===n})}),t??n)}))),n?(0,a.cloneElement)(f.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==y})))))}function u(e){const n=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},29252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=t(87462),a=(t(67294),t(3905)),o=t(65488),l=t(85162);const s={title:"Add AI incremental rendering feature"},i=void 0,c={unversionedId:"front/3d-space/advanced/dnalogel/components/IncrementRenderer",id:"front/3d-space/advanced/dnalogel/components/IncrementRenderer",title:"Add AI incremental rendering feature",description:"IncrementRenderer",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/front/3d-space/advanced/dnalogel/components/IncrementRenderer.md",sourceDirName:"front/3d-space/advanced/dnalogel/components",slug:"/front/3d-space/advanced/dnalogel/components/IncrementRenderer",permalink:"/en/docs/front/3d-space/advanced/dnalogel/components/IncrementRenderer",draft:!1,tags:[],version:"current",lastUpdatedBy:"sansi.lcj",lastUpdatedAt:1669717185,formattedLastUpdatedAt:"Nov 29, 2022",frontMatter:{title:"Add AI incremental rendering feature"}},d={},p=[{value:"<strong>IncrementRenderer</strong>",id:"incrementrenderer",level:2},{value:"Function Description",id:"function-description",level:2},{value:"Install reference",id:"install-reference",level:2},{value:"Development Guides",id:"development-guides",level:2},{value:"Initialize",id:"initialize",level:3},{value:"React Use Example",id:"react-use-example",level:3},{value:"Core approach",id:"core-approach",level:3},{value:"demo source reference",id:"demo-source-reference",level:2}],u={toc:p},m="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"incrementrenderer"},(0,a.kt)("strong",{parentName:"h2"},"IncrementRenderer")),(0,a.kt)("p",null,"Minimum support repository\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"@realsee/dnalogel@2.0.0-alpha.34")),(0,a.kt)("h2",{id:"function-description"},"Function Description"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Incremental Render")," Rapid rendering of three-dimensional space under the AI Design scenario when the three-dimensional space point has not yet been fully rendered, and supports continuous loading of completed points."),(0,a.kt)("h2",{id:"install-reference"},"Install reference"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Please choose ",(0,a.kt)("inlineCode",{parentName:"strong"},"yarn")," or ",(0,a.kt)("inlineCode",{parentName:"strong"},"npm")," installation method\uff1aas needed")),(0,a.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @realsee/dnalogel\n"))),(0,a.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @realsee/dnalogel\n"))),(0,a.kt)(l.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add @realsee/dnalogel\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"By es reference\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { IncrementRenderer } from "@realsee/dnalogel/components";\n')),(0,a.kt)("h2",{id:"development-guides"},"Development Guides"),(0,a.kt)("h3",{id:"initialize"},"Initialize"),(0,a.kt)("p",null,"Initialize object instance as needed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Incremental renderer configuration\n */\nexport interface IncrementRendererOptions {\n  // initial meta data\n  initialMeta?: IncrementRendererMeta\n\n  // initial work data\n  initialWork?: any\n\n  // polling interval, unit Milliseconds, default 1000ms\n  pollingInterval?: number\n\n  // The number of retries when getMeta or getWork gets an exception\n  retryCount?: number\n\n  // Interface to get meta data\n  getMeta: () => Promise<IncrementRendererMeta>\n\n  // Get work Data interface\n  getWork: () => Promise<any>\n\n  // When work data changes\n  onWorkChange: (work: Work) => void\n\n  // When rendering is completed\n  onRenderDone: (work: Work) => void\n\n  / / Rendering status changes\n  onStatusChange?: (status: RENDER_STATUS | string) => void\n\n  // Callback when an exception occurs\n  onError?: (error: Error) => void\n}\n\nconst incrementRenderer = new IncrementRenderer(opt:IncrementRendererOptions);\n")),(0,a.kt)("h3",{id:"react-use-example"},"React Use Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { IncrementRenderer } from "@/@realsee/core/modules/IncrementRenderer";\nimport { useFiveWork } from "@realsee/five/react";\nimport { useEffect, useCallback } from "react";\n\nexport const IncrementRendererUse = ({\n  props,\n  onFinished,\n}: {\n  props: { meta: any; work: any };\n  onFinished: () => void;\n}) => {\n  const [, loadFiveWork] = useFiveWork();\n\n  // Get meta data\n  // Refer to https://open-platform.realsee.com/developer/open/api/#/paths/open-v1-entity-meta/get\n  const getMeta = useCallback(async () => {\n    return await getMetaFromApi();\n  }, []);\n\n  // Get work data\n  // Refer to https://open-platform.realsee.com/developer/open/api/#/paths/open-v1-entity- vr/get\n  const getWork = useCallback(async () => {\n    return await getWorkFromApi();\n  }, []);\n\n  // Rendering status change callback\n  const onStatusChange = useCallback((status) => {\n    console.info("VR render status change: ", status);\n  }, []);\n\n  // Execute exception error capture callback\n  const onError = useCallback((e: Error) => {\n    console.error(e);\n  }, []);\n\n  // When the work data changes, that is, the incremental part is rendered and the new work data is handed over to five\n  const onWorkChange = useCallback(\n    (work) => {\n      if (work) {\n        loadFiveWork(work);\n      }\n    },\n    [loadFiveWork]\n  );\n\n  // This is the callback for complete rendering\n  const onRenderDone = useCallback(\n    (work) => {\n      onWorkChange(work);\n      onFinished?.();\n    },\n    [onFinished, onWorkChange]\n  );\n\n  useEffect(() => {\n    const incrementRenderer = new IncrementRenderer({\n      initialMeta: props.meta,\n      initialWork: props.work,\n      getMeta,\n      getWork,\n      onStatusChange,\n      onWorkChange,\n      onRenderDone,\n      onError,\n    });\n    return () => incrementRenderer.dispose();\n  }, [\n    getMeta,\n    getWork,\n    onError,\n    onRenderDone,\n    onStatusChange,\n    onWorkChange,\n    props.meta,\n    props.work,\n  ]);\n\n  return <></>;\n};\n')),(0,a.kt)("h3",{id:"core-approach"},"Core approach"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dispose()")," stop incremental rendering")),(0,a.kt)("h2",{id:"demo-source-reference"},"demo source reference"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/realsee-developer/dnalogel/tree/main/examples/src"},"demo source reference")))}f.isMDXComponent=!0}}]);