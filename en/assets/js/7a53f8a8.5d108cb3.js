"use strict";(self.webpackChunkrealsee_developer_github_com=self.webpackChunkrealsee_developer_github_com||[]).push([[2506],{49613:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},45558:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(59496),a=t(45924);const i="tabItem_IPoj";function o(e){let{children:n,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},n)}},38637:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(2962),a=t(59496),i=t(45924),o=t(26709),s=t(33548),l=t(14714),c=t(60411);const u="tabList_xr86",d="tabItem_r4_W";function p(e){var n;const{lazy:t,block:o,defaultValue:p,values:m,groupId:f,className:v}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??g.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),h=(0,s.l)(b,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)??g[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:k}=(0,l.U)(),[T,x]=(0,a.useState)(y),j=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=f){const e=w[f];null!=e&&e!==T&&b.some((n=>n.value===e))&&x(e)}const C=e=>{const n=e.currentTarget,t=j.indexOf(n),r=b[t].value;r!==T&&(N(n),x(r),null!=f&&k(f,String(r)))},I=e=>{var n;let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},v)},b.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>j.push(e),onKeyDown:I,onClick:C},o,{className:(0,i.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,a.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function m(e){const n=(0,o.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},91429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=t(2962),a=(t(59496),t(49613)),i=t(38637),o=t(45558);const s={title:"Browser Voice"},l=void 0,c={unversionedId:"front/live/function-expansion/rtc/browser",id:"front/live/function-expansion/rtc/browser",title:"Browser Voice",description:"Live implements native capacity calls via",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/front/live/function-expansion/rtc/browser.md",sourceDirName:"front/live/function-expansion/rtc",slug:"/front/live/function-expansion/rtc/browser",permalink:"/en/docs/front/live/function-expansion/rtc/browser",draft:!1,tags:[],version:"current",lastUpdatedBy:"sansi.lcj",lastUpdatedAt:1669717185,formattedLastUpdatedAt:"Nov 29, 2022",frontMatter:{title:"Browser Voice"},sidebar:"\u5982\u89c6\u5e26\u770b",previous:{title:"VR Same Screen",permalink:"/en/docs/front/live/get-started/sync-five-state"},next:{title:"Android Voice Integration",permalink:"/en/docs/front/live/function-expansion/rtc/android"}},u={},d=[{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"React Example",id:"react-example",level:2},{value:"Initialize rtc instances",id:"initialize-rtc-instances",level:3},{value:"Voice successfully added listener",id:"voice-successfully-added-listener",level:3},{value:"Voice error listening",id:"voice-error-listening",level:3}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Voice capacity depends on WebView/Browser container, which requires the container endside to implement RTC capability. In order to facilitate developers' access, the VRTC service of Realsee Developer Center provides container SDK and ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"jsbridge-x")," for mainstream platforms."),(0,a.kt)("p",{parentName:"admonition"},"Live implements native capacity calls via\njsbridge-x bridge with client or micromessage applet applications with a container SDK.This jsbridge-x instance needs to be provided as a configuration parameter to createLive(). If iOS/Android App (accessed for VRTC container SDK).",(0,a.kt)("strong",{parentName:"p"},"This chapter will show you how to add language features to your browser."))),(0,a.kt)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"voice dependency ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"@realsee/jsbridge-x")," pack. Make sure to install this package when developing.")),(0,a.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @realsee/jsbridge-x\n"))),(0,a.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @realsee/jsbridge-x\n")))),(0,a.kt)("h2",{id:"react-example"},"React Example"),(0,a.kt)("h3",{id:"initialize-rtc-instances"},"Initialize rtc instances"),(0,a.kt)("p",null,"Add the content of the initialization rtc instance to the creation file with the seeds."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { BrowserRTC } from "@realsee/live/lib/RTC/BrowserRTC";\nimport { VRWebViewRTC } from "@realsee/live/lib/RTC/VRWebViewRTC";\n/*\n * Note\uff1aJSBridgeBrowser needs users to inherit JSBridgeProtocol examples self-implement\n * * import JSBridgeProtocol from \'@realsee/jsbridge-x/lib/typeings/JSBridgeProtocol\'\n * **/\nimport { JSBridgeBrowser } from "../utils/browser";\nimport request from "../utils/request";\n\n/*\n * method of callback for language signature\uff1agetVoiceSign\n * This method is used internally by sdk and you simply need to implement it as such.\n * [Special note]\uff1aopts are physical references, and sdk is automatically injected when calling a language signature method. Use the example to write its reference without adding the arguments themselves.\n ***/\n// highlight-start\nconst getVoiceSign = async (opts) => {\n  // opts are physical references, and sdk will be injected automatically when calling the language signature method without having to be processed by the business party.\n  // Highlight-end\n  // request your backend interface here. The request method is simply encapsulating the fetch method without special treatment.\n  return await request("getRtcSign", {\n    voice_id: opts.voiceId,\n    room_id: opts.roomId,\n    user_id: opts.userId,\n  })\n    .then((res) => {\n      // Flag back from back voice signature etc. and as required by sdk, eturn out enough of\n      return {\n        sdkAppId: Number(res.voice_app_id),\n        userId: res.user_identifier,\n        userSig: res.sign,\n      };\n    })\n    .catch((error) => {\n      throw Error(error.message);\n    });\n};\n// Initialize rtc instance\nlet rtcInstance;\nrtcInstance = new BrowserRTC({ getVoiceSign });\n\nconst liveInstance = createLiveReact({\n  __debug__: true,\n  rtc: rtcInstance,\n});\n\nexport default liveInstance;\n')),(0,a.kt)("p",null,'if you need to implement multiple speech simultaneously (browser voice, client voice, micromessage), The method can be implemented under the "bridge" protocol.For more information, please refer to\uff1a ',(0,a.kt)("a",{parentName:"p",href:"https://open-platform.realsee.com/developer/docs/webview/jsbridge/intro/"},"@realsee/jsbridge-x")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"A simple implementation of JSBridgeBrowser")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='browser.js'",title:"'browser.js'"},'import request from "./request";\n\nexport class JSBridgeBrowser {\n  closeWebView() {\n    return window.history.back();\n  }\n\n  // way means new Or cover, first support new\n  openWebView(url, way) {\n    return window.location.href(url);\n  }\n\n  actionShare(shareConfig) {\n    return () => {};\n  }\n\n  async getUserInfo() {\n    const res = await request("getUserId")\n      .then((data) => {\n        return data.user_id;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n    const userInfo = {\n      userId: res,\n    };\n\n    return [userInfo];\n  }\n\n  async login() {\n    const res = await request("getUserId")\n      .then((data) => {\n        return data.user_id;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n\n    return res;\n  }\n\n  async logout() {\n    return {};\n  }\n\n  async closeLoading() {\n    return {};\n  }\n\n  async getBangsHeight() {\n    return 0;\n  }\n}\n')))),(0,a.kt)("h3",{id:"voice-successfully-added-listener"},"Voice successfully added listener"),(0,a.kt)("p",null,"::info successfully joined the event with ",(0,a.kt)("inlineCode",{parentName:"p"},"useRTCEventCallback")," hook for voice.\n:::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import LiveReact from "./LiveReact";\n\nconst { useRTCEventCallback } = LiveReact;\n\nuseRTCEventCallback("joined", () => {\n  console.log("rtc -- joined");\n});\n')),(0,a.kt)("h3",{id:"voice-error-listening"},"Voice error listening"),(0,a.kt)("p",null,"::info listen to voice misinformation by ",(0,a.kt)("inlineCode",{parentName:"p"},"useRTCEventCallback")," by taking an instance.",(0,a.kt)("br",{parentName:"p"}),"\n",":::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import LiveReact from "./LiveReact";\n\nconst { useRTCEventCallback } = LiveReact;\n\nuseRTCEventCallback("error", (error) => {\n  console.log("rtc -- error: ", error.message);\n});\n')))}m.isMDXComponent=!0}}]);