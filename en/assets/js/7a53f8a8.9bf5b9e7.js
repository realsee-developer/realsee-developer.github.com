"use strict";(self.webpackChunkrealsee_developer_github_com=self.webpackChunkrealsee_developer_github_com||[]).push([[2506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(67294),a=n(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(87462),a=n(67294),i=n(86010),o=n(72389),s=n(67392),l=n(7094),c=n(12466);const u={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function p(e){const{lazy:t,block:n,defaultValue:o,values:p,groupId:d,className:m}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??b.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),g=(0,s.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:y}=(0,l.U)(),[k,w]=(0,a.useState)(v),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=d){const e=h[d];null!=e&&e!==k&&f.some((t=>t.value===e))&&w(e)}const N=e=>{const t=e.currentTarget,n=T.indexOf(t),r=f[n].value;r!==k&&(x(t),w(r),null!=d&&y(d,String(r)))},I=e=>{let t=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",u.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>T.push(e),onKeyDown:I,onClick:N},o,{className:(0,i.Z)("tabs__item",u.tabItem,o?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,a.cloneElement)(b.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function d(e){const t=(0,o.Z)();return a.createElement(p,(0,r.Z)({key:String(t)},e))}},47124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(87462),a=(n(67294),n(3905)),i=n(65488),o=n(85162);const s={title:"Browser Voice"},l=void 0,c={unversionedId:"front/live/function-expansion/rtc/browser",id:"front/live/function-expansion/rtc/browser",title:"Browser Voice",description:"Live implements native capacity calls via",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/front/live/function-expansion/rtc/browser.md",sourceDirName:"front/live/function-expansion/rtc",slug:"/front/live/function-expansion/rtc/browser",permalink:"/en/docs/front/live/function-expansion/rtc/browser",draft:!1,tags:[],version:"current",lastUpdatedBy:"sansi.lcj",lastUpdatedAt:1669717185,formattedLastUpdatedAt:"Nov 29, 2022",frontMatter:{title:"Browser Voice"},sidebar:"\u5982\u89c6\u5e26\u770b",previous:{title:"VR Same Screen",permalink:"/en/docs/front/live/get-started/sync-five-state"},next:{title:"Android Voice Integration",permalink:"/en/docs/front/live/function-expansion/rtc/android"}},u={},p=[{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"React Example",id:"react-example",level:2},{value:"Initialize rtc instances",id:"initialize-rtc-instances",level:3},{value:"Voice successfully added listener",id:"voice-successfully-added-listener",level:3},{value:"Voice error listening",id:"voice-error-listening",level:3}],d={toc:p},m="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Voice capacity depends on WebView/Browser container, which requires the container endside to implement RTC capability. In order to facilitate developers' access, the VRTC service of Realsee Developer Center provides container SDK and ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"jsbridge-x")," for mainstream platforms."),(0,a.kt)("p",{parentName:"admonition"},"Live implements native capacity calls via\njsbridge-x bridge with client or micromessage applet applications with a container SDK.This jsbridge-x instance needs to be provided as a configuration parameter to createLive(). If iOS/Android App (accessed for VRTC container SDK).",(0,a.kt)("strong",{parentName:"p"},"This chapter will show you how to add language features to your browser."))),(0,a.kt)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,a.kt)("admonition",{type:"important"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"voice dependency ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"@realsee/jsbridge-x")," pack. Make sure to install this package when developing.")),(0,a.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @realsee/jsbridge-x\n"))),(0,a.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @realsee/jsbridge-x\n"))),(0,a.kt)(o.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add @realsee/jsbridge-x\n")))),(0,a.kt)("h2",{id:"react-example"},"React Example"),(0,a.kt)("h3",{id:"initialize-rtc-instances"},"Initialize rtc instances"),(0,a.kt)("p",null,"Add the content of the initialization rtc instance to the creation file with the seeds."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { BrowserRTC } from "@realsee/live/lib/RTC/BrowserRTC";\nimport { VRWebViewRTC } from "@realsee/live/lib/RTC/VRWebViewRTC";\n/*\n * Note\uff1aJSBridgeBrowser needs users to inherit JSBridgeProtocol examples self-implement\n * * import JSBridgeProtocol from \'@realsee/jsbridge-x/lib/typeings/JSBridgeProtocol\'\n * **/\nimport { JSBridgeBrowser } from "../utils/browser";\nimport request from "../utils/request";\n\n/*\n * method of callback for language signature\uff1agetVoiceSign\n * This method is used internally by sdk and you simply need to implement it as such.\n * [Special note]\uff1aopts are physical references, and sdk is automatically injected when calling a language signature method. Use the example to write its reference without adding the arguments themselves.\n ***/\n// highlight-start\nconst getVoiceSign = async (opts) => {\n  // opts are physical references, and sdk will be injected automatically when calling the language signature method without having to be processed by the business party.\n  // Highlight-end\n  // request your backend interface here. The request method is simply encapsulating the fetch method without special treatment.\n  return await request("getRtcSign", {\n    voice_id: opts.voiceId,\n    room_id: opts.roomId,\n    user_id: opts.userId,\n  })\n    .then((res) => {\n      // Flag back from back voice signature etc. and as required by sdk, eturn out enough of\n      return {\n        sdkAppId: Number(res.voice_app_id),\n        userId: res.user_identifier,\n        userSig: res.sign,\n      };\n    })\n    .catch((error) => {\n      throw Error(error.message);\n    });\n};\n// Initialize rtc instance\nlet rtcInstance;\nrtcInstance = new BrowserRTC({ getVoiceSign });\n\nconst liveInstance = createLiveReact({\n  __debug__: true,\n  rtc: rtcInstance,\n});\n\nexport default liveInstance;\n')),(0,a.kt)("p",null,'if you need to implement multiple speech simultaneously (browser voice, client voice, micromessage), The method can be implemented under the "bridge" protocol.For more information, please refer to\uff1a ',(0,a.kt)("a",{parentName:"p",href:"https://open-platform.realsee.com/developer/docs/webview/jsbridge/intro/"},"@realsee/jsbridge-x")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"A simple implementation of JSBridgeBrowser")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title='browser.js'",title:"'browser.js'"},'import request from "./request";\n\nexport class JSBridgeBrowser {\n  closeWebView() {\n    return window.history.back();\n  }\n\n  // way means new Or cover, first support new\n  openWebView(url, way) {\n    return window.location.href(url);\n  }\n\n  actionShare(shareConfig) {\n    return () => {};\n  }\n\n  async getUserInfo() {\n    const res = await request("getUserId")\n      .then((data) => {\n        return data.user_id;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n    const userInfo = {\n      userId: res,\n    };\n\n    return [userInfo];\n  }\n\n  async login() {\n    const res = await request("getUserId")\n      .then((data) => {\n        return data.user_id;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n\n    return res;\n  }\n\n  async logout() {\n    return {};\n  }\n\n  async closeLoading() {\n    return {};\n  }\n\n  async getBangsHeight() {\n    return 0;\n  }\n}\n')))),(0,a.kt)("h3",{id:"voice-successfully-added-listener"},"Voice successfully added listener"),(0,a.kt)("p",null,"::info successfully joined the event with ",(0,a.kt)("inlineCode",{parentName:"p"},"useRTCEventCallback")," hook for voice.\n:::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import LiveReact from "./LiveReact";\n\nconst { useRTCEventCallback } = LiveReact;\n\nuseRTCEventCallback("joined", () => {\n  console.log("rtc -- joined");\n});\n')),(0,a.kt)("h3",{id:"voice-error-listening"},"Voice error listening"),(0,a.kt)("p",null,"::info listen to voice misinformation by ",(0,a.kt)("inlineCode",{parentName:"p"},"useRTCEventCallback")," by taking an instance.",(0,a.kt)("br",{parentName:"p"}),"\n",":::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import LiveReact from "./LiveReact";\n\nconst { useRTCEventCallback } = LiveReact;\n\nuseRTCEventCallback("error", (error) => {\n  console.log("rtc -- error: ", error.message);\n});\n')))}b.isMDXComponent=!0}}]);